{"version":3,"file":null,"sources":["../src/utils.ts","../src/local.service.ts","../src/config.service.ts","../src/storage.service.ts","../src/shared.service.ts","../src/jwt-http.service.ts","../src/popup.service.ts","../src/oauth1.service.ts","../src/oauth2.service.ts","../src/oauth.service.ts","../src/auth.service.ts","../src/ng2-ui-auth.module.ts"],"sourcesContent":["/**\n * Created by Ron on 17/12/2015.\n */\n\nexport function assign(target: any, ...src: any[]): any {\n    if (target == null) {\n        throw new TypeError('Cannot convert undefined or null to object');\n    }\n\n    target = Object(target);\n    for (var index = 1; index < arguments.length; index++) {\n        var source = arguments[index];\n        if (source != null) {\n            for (var key in source) {\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n    }\n    return target;\n}\n\nexport function joinUrl(baseUrl: string, url: string) {\n    if (/^(?:[a-z]+:)?\\/\\//i.test(url)) {\n        return url;\n    }\n\n    let joined = [baseUrl, url].join('/');\n\n    let normalize = function(str) {\n        return str\n            .replace(/[\\/]+/g, '/')\n            .replace(/\\/\\?/g, '?')\n            .replace(/\\/\\#/g, '#')\n            .replace(/\\:\\//g, '://');\n    };\n\n    return normalize(joined);\n}\n\nexport function merge(obj1, obj2) {\n    let result = {};\n    for (var i in obj1) {\n        if (obj1.hasOwnProperty(i)) {\n            if ((i in obj2) && (typeof obj1[i] === 'object') && (i !== null)) {\n                result[i] = merge(obj1[i], obj2[i]);\n            } else {\n                result[i] = obj1[i];\n            }\n        }\n    }\n    for (i in obj2) {\n        if (obj2.hasOwnProperty(i)) {\n            if (i in result) {\n                continue;\n            }\n            result[i] = obj2[i];\n        }\n\n    }\n    return result;\n}\n\nexport function camelCase(name) {\n    return name.replace(/([\\:\\-\\_]+(.))/g, function(_, separator, letter, offset) {\n        return offset ? letter.toUpperCase() : letter;\n    });\n}","import {Injectable} from '@angular/core';\nimport {SharedService} from './shared.service';\nimport {ConfigService} from './config.service';\nimport {RequestOptionsArgs, Response} from '@angular/http';\nimport {joinUrl} from './utils';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport {JwtHttp} from './jwt-http.service';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\nfunction getFullOpts(user: string | Object, userOpts?: RequestOptionsArgs) {\n    const opts = userOpts || {};\n    if (user) {\n        opts.body = typeof user === 'string' ? user : JSON.stringify(user);\n    }\n    opts.method = opts.method || 'POST';\n    return opts;\n}\n\n@Injectable()\nexport class LocalService {\n    constructor(private http: JwtHttp,\n                private shared: SharedService,\n                private config: ConfigService) {}\n\n    login(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\n        const fullOpts = getFullOpts(user, opts);\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.loginUrl);\n\n        return this.http.request(url, fullOpts)\n            .do((response: Response) => this.shared.setToken(response));\n    }\n\n    signup(user: string | Object, opts?: RequestOptionsArgs): Observable<Response> {\n        const fullOpts = getFullOpts(user, opts);\n        const url = fullOpts.url ? fullOpts.url : joinUrl(this.config.baseUrl, this.config.signupUrl);\n\n        return this.http.request(url, getFullOpts(user, fullOpts));\n    }\n}","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {Response} from '@angular/http';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\nexport interface IPopupOptions {\n    width?: number;\n    height?: number;\n    left?: number;\n    top?: number;\n}\n\nexport interface IOauth1Options {\n    url?: string;\n    name?: string;\n    popupOptions?: IPopupOptions;\n    redirectUri?: string;\n    authorizationEndpoint?: string;\n    oauthType?: string;\n    exchangeForToken?: boolean | ((options: {code?: string, state?: string}, userData?: any) => Observable<Response>);\n}\n\nexport interface IOauth2Options extends IOauth1Options {\n    state?: string| (() => string);\n    defaultUrlParams?: string[];\n    responseType?: string;\n    responseParams?: {\n        code?: string;\n        clientId?: string;\n        redirectUri?: string;\n    };\n    clientId?: string;\n    scopeDelimiter?: string;\n    scopePrefix?: string;\n\n    requiredUrlParams?: string[];\n    optionalUrlParams?: string[];\n    scope?: string[];\n    display?: string;\n}\n\nexport interface IProviders {\n    [provider: string]: IOauth2Options;\n}\n\nexport abstract class CustomConfig {\n    tokenRoot: string;\n    cordova: boolean;\n    baseUrl: string;\n    loginUrl: string;\n    signupUrl: string;\n    unlinkUrl: string;\n    tokenName: string;\n    tokenSeparator: string;\n    tokenPrefix: string;\n    authToken: string;\n    authHeader: string;\n    storageType: string;\n    providers: IProviders;\n    defaultHeaders: { [name: string]: string };\n    withCredentials: boolean;\n    autoRefreshToken: boolean;\n    refreshUrl: string;\n    resolveToken: (response: Response) => string;\n}\n\n@Injectable()\nexport class ConfigService {\n    constructor(config?: CustomConfig) {\n        Object.keys(config).forEach((key) => {\n            if (typeof config[key] === \"undefined\") {\n                return;\n            }\n            if (key !== 'providers') {\n                this[key] = config[key];\n            } else {\n                Object.keys(config[key]).forEach((provider) => {\n                    if (typeof this.providers[provider] === 'undefined') {\n                        this.providers[provider] = config.providers[provider];\n                    } else {\n                        Object.keys(config.providers[provider]).forEach((prop) => {\n                            this.providers[provider][prop] = config.providers[provider][prop];\n                        });\n                    }\n                });\n            }\n        });\n    }\n    withCredentials = false;\n    tokenRoot = null;\n    baseUrl = '/';\n    loginUrl = '/auth/login';\n    signupUrl = '/auth/signup';\n    unlinkUrl = '/auth/unlink/';\n    refreshUrl = '/auth/refresh';\n    tokenName = 'token';\n    tokenSeparator = '_';\n    tokenPrefix = 'ng2-ui-auth';\n    authHeader = 'Authorization';\n    authToken = 'Bearer';\n    storageType = 'localStorage';\n    defaultHeaders = null;\n    autoRefreshToken = false;\n    cordova = !!window['cordova'];\n    resolveToken = (response: Response) => {\n        const accessToken: string | Object | null | undefined = response && response.json() &&\n            (response.json().access_token || response.json().token || response.json().data);\n        if (!accessToken) {\n            console.warn('No token found');\n            return null;\n        }\n        if (typeof accessToken === 'string') {\n            return accessToken;\n        }\n        if (typeof accessToken !== 'object') {\n            console.warn('No token found');\n            return null;\n        }\n        const tokenRootData = this.tokenRoot &&\n            this.tokenRoot.split('.').reduce(\n                (o, x) => {\n                    return o[x];\n                },\n                accessToken);\n        const token = tokenRootData ? tokenRootData[this.tokenName] : accessToken[this.tokenName];\n        if (token) {\n            return token;\n        }\n        let tokenPath = this.tokenRoot ? this.tokenRoot + '.' + this.tokenName : this.tokenName;\n        console.warn('Expecting a token named \"' + tokenPath);\n        return null;\n    };\n    providers: IProviders = {\n        facebook: {\n            name: 'facebook',\n            url: '/auth/facebook',\n            authorizationEndpoint: 'https://www.facebook.com/v2.5/dialog/oauth',\n            redirectUri: window.location.origin + '/',\n            requiredUrlParams: ['display', 'scope'],\n            scope: ['email'],\n            scopeDelimiter: ',',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 580, height: 400}\n        },\n        google: {\n            name: 'google',\n            url: '/auth/google',\n            authorizationEndpoint: 'https://accounts.google.com/o/oauth2/auth',\n            redirectUri: window.location.origin,\n            requiredUrlParams: ['scope'],\n            optionalUrlParams: ['display', 'state'],\n            scope: ['profile', 'email'],\n            scopePrefix: 'openid',\n            scopeDelimiter: ' ',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 452, height: 633},\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2)),\n        },\n        github: {\n            name: 'github',\n            url: '/auth/github',\n            authorizationEndpoint: 'https://github.com/login/oauth/authorize',\n            redirectUri: window.location.origin,\n            optionalUrlParams: ['scope'],\n            scope: ['user:email'],\n            scopeDelimiter: ' ',\n            oauthType: '2.0',\n            popupOptions: {width: 1020, height: 618}\n        },\n        instagram: {\n            name: 'instagram',\n            url: '/auth/instagram',\n            authorizationEndpoint: 'https://api.instagram.com/oauth/authorize',\n            redirectUri: window.location.origin,\n            requiredUrlParams: ['scope'],\n            scope: ['basic'],\n            scopeDelimiter: '+',\n            oauthType: '2.0'\n        },\n        linkedin: {\n            name: 'linkedin',\n            url: '/auth/linkedin',\n            authorizationEndpoint: 'https://www.linkedin.com/uas/oauth2/authorization',\n            redirectUri: window.location.origin,\n            requiredUrlParams: ['state'],\n            scope: ['r_emailaddress'],\n            scopeDelimiter: ' ',\n            state: 'STATE',\n            oauthType: '2.0',\n            popupOptions: {width: 527, height: 582}\n        },\n        twitter: {\n            name: 'twitter',\n            url: '/auth/twitter',\n            authorizationEndpoint: 'https://api.twitter.com/oauth/authenticate',\n            redirectUri: window.location.origin,\n            oauthType: '1.0',\n            popupOptions: {width: 495, height: 645}\n        },\n        twitch: {\n            name: 'twitch',\n            url: '/auth/twitch',\n            authorizationEndpoint: 'https://api.twitch.tv/kraken/oauth2/authorize',\n            redirectUri: window.location.origin,\n            requiredUrlParams: ['scope'],\n            scope: ['user_read'],\n            scopeDelimiter: ' ',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 500, height: 560}\n        },\n        live: {\n            name: 'live',\n            url: '/auth/live',\n            authorizationEndpoint: 'https://login.live.com/oauth20_authorize.srf',\n            redirectUri: window.location.origin,\n            requiredUrlParams: ['display', 'scope'],\n            scope: ['wl.emails'],\n            scopeDelimiter: ' ',\n            display: 'popup',\n            oauthType: '2.0',\n            popupOptions: {width: 500, height: 560}\n        },\n        yahoo: {\n            name: 'yahoo',\n            url: '/auth/yahoo',\n            authorizationEndpoint: 'https://api.login.yahoo.com/oauth2/request_auth',\n            redirectUri: window.location.origin,\n            scope: [],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: {width: 559, height: 519}\n        },\n        bitbucket: {\n            name: 'bitbucket',\n            url: '/auth/bitbucket',\n            authorizationEndpoint: 'https://bitbucket.org/site/oauth2/authorize',\n            redirectUri: window.location.origin + '/',\n            requiredUrlParams: ['scope'],\n            scope: ['email'],\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: {width: 1028, height: 529}\n        },\n        spotify: {\n            name: 'spotify',\n            url: '/auth/spotify',\n            authorizationEndpoint: 'https://accounts.spotify.com/authorize',\n            redirectUri: window.location.origin,\n            optionalUrlParams: ['state'],\n            requiredUrlParams: ['scope'],\n            scope: ['user-read-email'],\n            scopePrefix: '',\n            scopeDelimiter: ',',\n            oauthType: '2.0',\n            popupOptions: { width: 500, height: 530 },\n            state: () => encodeURIComponent(Math.random().toString(36).substr(2))\n        }\n    };\n}\n","import {Injectable} from '@angular/core';\nimport {ConfigService} from './config.service';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n@Injectable()\nexport class StorageService {\n    private store = {};\n    private isStorageAvailable: boolean;\n    constructor(private config: ConfigService) {\n        this.isStorageAvailable = (() => {\n            try {\n                let supported = config.storageType in window && window[config.storageType] !== null;\n\n                if (supported) {\n                    let key = Math.random().toString(36).substring(7);\n                    (<any>window[this.config.storageType]).setItem(key, '');\n                    (<any>window[this.config.storageType]).removeItem(key);\n                }\n\n                return supported;\n            } catch (e) {\n                return false;\n            }\n        })();\n        if (!this.isStorageAvailable) {\n            console.warn(config.storageType + ' is not available.');\n        }\n    }\n    get(key: string) {\n        return this.isStorageAvailable ? window[this.config.storageType].getItem(key) : this.store[key];\n    }\n    set(key: string, value: string) {\n        return this.isStorageAvailable ? window[this.config.storageType].setItem(key, value) : this.store[key] = value;\n    }\n    remove(key: string) {\n        return this.isStorageAvailable ? window[this.config.storageType].removeItem(key) : delete this.store[key];\n    }\n}\n","/**\n * Created by Ron on 17/12/2015.\n */\nimport {Observable} from 'rxjs/Observable';\nimport {Subscriber} from 'rxjs/Subscriber';\nimport {Injectable} from '@angular/core';\nimport {Response} from '@angular/http';\nimport {ConfigService} from './config.service';\nimport {StorageService} from './storage.service';\n/**\n * Created by Ron on 17/12/2015.\n */\n\n@Injectable()\nexport class SharedService {\n    tokenName = this.config.tokenPrefix ? [this.config.tokenPrefix, this.config.tokenName].join(this.config.tokenSeparator) : this.config.tokenName;\n    constructor(private storage: StorageService, private config: ConfigService) {}\n    getToken() {\n        return this.storage.get(this.tokenName);\n    }\n    getPayload() {\n        let token = this.getToken();\n\n        if (token && token.split('.').length === 3) {\n            try {\n                let base64Url = token.split('.')[1];\n                let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n                return JSON.parse(decodeURIComponent(encodeURIComponent(window.atob(base64))));\n            } catch (e) {\n                return undefined;\n            }\n        }\n    }\n    setToken(response: string | Response) {\n        if (!response) {\n            console.warn('Can\\'t set token without passing a value');\n            return;\n        }\n\n        let token: string;\n        if (typeof response === 'string') {\n            token = response;\n        } else {\n            token = this.config.resolveToken(response)\n        }\n        this.storage.set(this.tokenName, token);\n    }\n    removeToken() {\n        this.storage.remove(this.tokenName);\n    }\n    isAuthenticated() {\n        let token = this.getToken();\n\n        // a token is present\n        if (token) {\n            // token with a valid JWT format XXX.YYY.ZZZ\n            if (token.split('.').length === 3) {\n                // could be a valid JWT or an access token with the same format\n                try {\n                    let base64Url = token.split('.')[1];\n                    let base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');\n                    let exp = JSON.parse(window.atob(base64)).exp;\n                    // jwt with an optional expiration claims\n                    if (exp) {\n                        let isExpired = Math.round(new Date().getTime() / 1000) >= exp;\n                        if (isExpired) {\n                            // fail: Expired token\n                            this.storage.remove(this.tokenName);\n                            return false;\n                        } else {\n                            // pass: Non-expired token\n                            return true;\n                        }\n                    }\n                } catch (e) {\n                    // pass: Non-JWT token that looks like JWT\n                    return true;\n                }\n            }\n            // pass: All other tokens\n            return true;\n        }\n        // lail: No token at all\n        return false;\n    }\n    getExpirationDate() {\n        let payload = this.getPayload();\n        if (payload.exp && Math.round(new Date().getTime() / 1000) < payload.exp) {\n            let date = new Date(0);\n            date.setUTCSeconds(payload.exp);\n            return date;\n        }\n        return null;\n    }\n    logout(): Observable<any> {\n        this.storage.remove(this.tokenName);\n        return Observable.create((observer: Subscriber<any>) => {\n            observer.next();\n            observer.complete();\n        });\n    }\n    setStorageType(type) {\n        this.config.storageType = type;\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Http, RequestMethod, Response, RequestOptionsArgs, Headers, Request, RequestOptions, ConnectionBackend} from '@angular/http';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/switchMap';\nimport {ConfigService} from './config.service';\nimport {SharedService} from './shared.service';\n/**\n * Created by Ron on 06/01/2016.\n */\n\nexport interface JwtRequestOptionsArgs extends RequestOptionsArgs {\n    autoRefreshToken?: boolean\n}\n\n@Injectable()\nexport class JwtHttp extends Http {\n    constructor(_backend: ConnectionBackend,\n                _defaultOptions: RequestOptions,\n                private _shared: SharedService,\n                private _config: ConfigService) {\n        super(_backend, _defaultOptions);\n    }\n\n    request(url: string | Request, options?: JwtRequestOptionsArgs): Observable<Response> {\n        //if the token is expired the \"getExpirationDate\" function returns null\n        if (this._shared.getToken() && !this._shared.getExpirationDate() && (\n            (options && options.autoRefreshToken) ||\n            ((!options || typeof options.autoRefreshToken === 'undefined') && \n            this._config && this._config.autoRefreshToken))) {\n            return this.refreshToken()\n                .switchMap(() => this.actualRequest(url, options));\n        }\n        return this.actualRequest(url, options);\n    }\n\n    get(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Get;\n        return this.request(url, options);\n    }\n\n    post(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Post;\n        options.body = body;\n        return this.request(url, options);\n    }\n\n    put(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Put;\n        options.body = body;\n        return this.request(url, options);\n    }\n\n    delete(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Delete;\n        return this.request(url, options);\n    }\n\n    patch(url: string, body: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Patch;\n        options.body = body;\n        return this.request(url, options);\n    }\n\n    head(url: string, options?: JwtRequestOptionsArgs): Observable<Response> {\n        options = options || {};\n        options.method = RequestMethod.Head;\n        return this.request(url, options);\n    }\n\n\n    refreshToken(): Observable<Response> {\n        const authHeader = new Headers();\n        authHeader.append(this._config.authHeader, (this._config.authToken + ' ' + this._shared.getToken()));\n        return super\n            .get(this._config.refreshUrl, {\n                headers: authHeader\n            })\n            .do((res: Response) => this._shared.setToken(res));\n    }\n\n    private actualRequest(url: string | Request, options?: JwtRequestOptionsArgs) {\n        if (url instanceof Request) {\n            url.headers = url.headers || new Headers();\n            this.setHeaders(url);\n        } else {\n            options = options || {};\n            this.setHeaders(options);\n        }\n        return super.request(url, options);\n    }\n\n    private setHeaders(obj: { headers?: Headers, [index: string]: any }) {\n        obj.headers = obj.headers || new Headers();\n        if (this._config.defaultHeaders) {\n            Object.keys(this._config.defaultHeaders).forEach((defaultHeader) => {\n                if (!obj.headers.has(defaultHeader)) {\n                    obj.headers.set(defaultHeader, this._config.defaultHeaders[defaultHeader]);\n                }\n            });\n        }\n        if (this._shared.isAuthenticated()) {\n            obj.headers.set(this._config.authHeader, this._config.authToken + ' ' + this._shared.getToken());\n        }\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {assign} from './utils';\nimport {ConfigService, IPopupOptions} from './config.service';\nimport 'rxjs/add/observable/interval';\nimport 'rxjs/add/observable/fromEvent';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/take';\nimport 'rxjs/add/operator/takeWhile';\n\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n@Injectable()\nexport class PopupService {\n    url = '';\n    popupWindow: Window = null;\n\n    private static prepareOptions(options: IPopupOptions) {\n        options = options || {};\n        let width = options.width || 500;\n        let height = options.height || 500;\n        return assign(\n            {\n                width: width,\n                height: height,\n                left: window.screenX + ((window.outerWidth - width) / 2),\n                top: window.screenY + ((window.outerHeight - height) / 2.5)\n            },\n            options);\n    }\n\n    private static stringifyOptions(options: Object) {\n        return Object.keys(options).map((key) => {\n            return key + '=' + options[key];\n        }).join(',');\n    }\n\n    private static parseQueryString(joinedKeyValue: string): any {\n        let key, value;\n        return joinedKeyValue.split('&').reduce(\n            (obj, keyValue) => {\n                if (keyValue) {\n                    value = keyValue.split('=');\n                    key = decodeURIComponent(value[0]);\n                    obj[key] = typeof value[1] !== 'undefined' ? decodeURIComponent(value[1]) : true;\n                }\n                return obj;\n            },\n            {});\n    }\n\n\n    constructor(private config: ConfigService) {}\n    open(url: string, name: string, options: IPopupOptions) {\n        this.url = url;\n\n        let stringifiedOptions = PopupService.stringifyOptions(PopupService.prepareOptions(options));\n        let UA = window.navigator.userAgent;\n        let windowName = (this.config.cordova || UA.indexOf('CriOS') > -1) ? '_blank' : name;\n\n        this.popupWindow = window.open(url, windowName, stringifiedOptions);\n\n        window['popup'] = this.popupWindow;\n\n        if (this.popupWindow && this.popupWindow.focus) {\n            this.popupWindow.focus();\n        }\n\n        return this;\n    }\n\n    eventListener(redirectUri: string) {\n        return Observable\n            .fromEvent<Event>(this.popupWindow, 'loadstart')\n            .switchMap((event: Event & { url: string }) => {\n                if (!this.popupWindow || this.popupWindow.closed) {\n                    return Observable.of('Popup Window Closed');\n                }\n                if (event.url.indexOf(redirectUri) !== 0) {\n                    return Observable.empty();\n                }\n\n                let parser = document.createElement('a');\n                parser.href = event.url;\n\n                if (parser.search || parser.hash) {\n                    const queryParams = parser.search.substring(1).replace(/\\/$/, '');\n                    const hashParams = parser.hash.substring(1).replace(/\\/$/, '');\n                    const hash = PopupService.parseQueryString(hashParams);\n                    const qs = PopupService.parseQueryString(queryParams);\n                    const allParams = assign({}, qs, hash);\n\n                    this.popupWindow.close();\n\n                    if (allParams.error) {\n                        throw allParams.error;\n                    } else {\n                        return Observable.of(allParams);\n                    }\n                }\n                return Observable.empty();\n            })\n            .take(1)\n            .takeWhile((response) => response !== 'Popup Window Closed');\n    }\n\n    pollPopup() {\n        return Observable\n            .interval(50)\n            .switchMap(() => {\n                if (!this.popupWindow || this.popupWindow.closed) {\n                    return Observable.of('Popup Window Closed');\n                }\n                let documentOrigin = document.location.host;\n                let popupWindowOrigin = '';\n                try {\n                    popupWindowOrigin = this.popupWindow.location.host;\n                } catch (error) {\n                    // ignore DOMException: Blocked a frame with origin from accessing a cross-origin frame.\n                    //error instanceof DOMException && error.name === 'SecurityError'\n                }\n                if (popupWindowOrigin === documentOrigin && (this.popupWindow.location.search || this.popupWindow.location.hash)) {\n                    const queryParams = this.popupWindow.location.search.substring(1).replace(/\\/$/, '');\n                    const hashParams = this.popupWindow.location.hash.substring(1).replace(/[\\/$]/, '');\n                    const hash = PopupService.parseQueryString(hashParams);\n                    const qs = PopupService.parseQueryString(queryParams);\n                    this.popupWindow.close();\n                    const allParams = assign({}, qs, hash);\n                    if (allParams.error) {\n                        throw allParams.error;\n                    } else {\n                        return Observable.of(allParams);\n                    }\n                }\n                return Observable.empty();\n            })\n            .take(1)\n            .takeWhile((response) => response !== 'Popup Window Closed');\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {PopupService} from './popup.service';\nimport {Response} from '@angular/http';\nimport {joinUrl, assign} from './utils';\nimport {ConfigService, IOauth1Options} from './config.service';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/switchMap';\nimport {JwtHttp} from './jwt-http.service';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n\n@Injectable()\nexport class Oauth1Service {\n    private static base: IOauth1Options = {\n        url: null,\n        name: null,\n        popupOptions: null,\n        redirectUri: null,\n        authorizationEndpoint: null\n    };\n    private defaults: IOauth1Options;\n    constructor(private http: JwtHttp, private popup: PopupService, private config: ConfigService) {}\n    open(options?: IOauth1Options, userData?: any): Observable<Response> {\n        this.defaults = assign({}, Oauth1Service.base, options);\n        let popupWindow;\n        let serverUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n\n        if (!this.config.cordova) {\n            popupWindow = this.popup.open('', this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/);\n        }\n\n        return this.http.post(serverUrl, JSON.stringify(this.defaults))\n            .switchMap((response: Response) => {\n                if (this.config.cordova) {\n                    popupWindow = this.popup.open(\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?'),\n                        this.defaults.name,\n                        this.defaults.popupOptions);\n                } else {\n                    popupWindow.popupWindow.location =\n                        [this.defaults.authorizationEndpoint, this.buildQueryString(response.json())].join('?');\n                }\n\n                return this.config.cordova ? popupWindow.eventListener(this.defaults.redirectUri) : popupWindow.pollPopup();\n            })\n            .switchMap((response) => {\n                let exchangeForToken: any = options.exchangeForToken;\n                if (typeof exchangeForToken !== 'function') {\n                    exchangeForToken = this.exchangeForToken.bind(this);\n                }\n                return exchangeForToken(response, userData);\n            });\n    }\n    private exchangeForToken(oauthData, userData?: any) {\n        let data = assign({}, this.defaults, oauthData, userData);\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n        return this.http.post(exchangeForTokenUrl, data, { withCredentials: this.config.withCredentials });\n    }\n    private buildQueryString(obj: Object) {\n        return Object.keys(obj).map((key) => {\n            return encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]);\n        }).join('&');\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {assign, joinUrl, merge, camelCase} from './utils';\nimport {ConfigService, IOauth2Options} from './config.service';\nimport {PopupService} from './popup.service';\nimport {StorageService} from './storage.service';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/observable/of';\nimport {JwtHttp} from './jwt-http.service';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n\n@Injectable()\nexport class Oauth2Service {\n    private static base: IOauth2Options = {\n        defaultUrlParams: ['response_type', 'client_id', 'redirect_uri'],\n        responseType: 'code',\n        responseParams: {\n            code: 'code',\n            clientId: 'clientId',\n            redirectUri: 'redirectUri'\n        }\n    };\n\n    private defaults: IOauth2Options;\n\n    constructor(private http: JwtHttp,\n                private popup: PopupService,\n                private storage: StorageService,\n                private config: ConfigService) {\n    }\n\n    open(options: IOauth2Options, userData?: any) {\n        this.defaults = merge(options, Oauth2Service.base);\n\n        let url;\n        let openPopup: Observable<any>;\n        let stateName = this.defaults.name + '_state';\n        let state = this.defaults.state;\n        if (typeof state === 'string') {\n            this.storage.set(stateName, state);\n        } else if (typeof state === 'function') {\n            this.storage.set(stateName, state());\n        }\n\n        url = [this.defaults.authorizationEndpoint, this.buildQueryString()].join('?');\n\n        if (this.config.cordova) {\n            openPopup = this.popup\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\n                .eventListener(this.defaults.redirectUri);\n        } else {\n            openPopup = this.popup\n                .open(url, this.defaults.name, this.defaults.popupOptions/*, this.defaults.redirectUri*/)\n                .pollPopup();\n        }\n\n        return openPopup\n            .switchMap((oauthData) => {\n                // when no server URL provided, return popup params as-is.\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (!options.exchangeForToken && (this.defaults.responseType === 'token' || !this.defaults.url)) {\n                    return Observable.of(oauthData);\n                }\n\n                if (oauthData.state && oauthData.state !== this.storage.get(stateName)) {\n                    throw 'OAuth \"state\" mismatch';\n                }\n                let exchangeForToken: any = options.exchangeForToken;\n                if (typeof exchangeForToken !== 'function') {\n                    exchangeForToken = this.exchangeForToken.bind(this);\n                }\n                return exchangeForToken(oauthData, userData);\n            });\n    }\n\n    private exchangeForToken(oauthData: {code?: string, state?: string}, userData?: {}) {\n        let data: any = assign({}, this.defaults, oauthData, userData);\n\n        let exchangeForTokenUrl = this.config.baseUrl ? joinUrl(this.config.baseUrl, this.defaults.url) : this.defaults.url;\n\n        return this.http.post(exchangeForTokenUrl,  JSON.stringify(data), { withCredentials: this.config.withCredentials });\n    }\n\n    private buildQueryString() {\n        let keyValuePairs: string[][] = [];\n        let urlParams = ['defaultUrlParams', 'requiredUrlParams', 'optionalUrlParams'];\n\n        urlParams.forEach((params) => {\n            if (this.defaults[params]) {\n                (<string[]>this.defaults[params]).forEach((paramName) => {\n                    let camelizedName = camelCase(paramName);\n                    let paramValue = typeof this.defaults[paramName] === 'function' ?\n                        this.defaults[paramName]() :\n                        this.defaults[camelizedName];\n\n                    if (paramName === 'state') {\n                        let stateName = this.defaults.name + '_state';\n                        paramValue = encodeURIComponent(this.storage.get(stateName));\n                    }\n\n                    if (paramName === 'scope' && Array.isArray(paramValue)) {\n                        paramValue = paramValue.join(this.defaults.scopeDelimiter);\n\n                        if (this.defaults.scopePrefix) {\n                            paramValue = [this.defaults.scopePrefix, paramValue].join(this.defaults.scopeDelimiter);\n                        }\n                    }\n\n                    keyValuePairs.push([paramName, paramValue]);\n                });\n            }\n        });\n\n        return keyValuePairs.map(function(pair) {\n            return pair.join('=');\n        }).join('&');\n    }\n}\n","import {Injectable, Injector} from '@angular/core';\nimport {Oauth1Service} from './oauth1.service';\nimport {Oauth2Service} from './oauth2.service';\nimport {SharedService} from './shared.service';\nimport {Response, RequestOptionsArgs} from '@angular/http';\nimport {joinUrl} from './utils';\nimport {ConfigService, IOauth1Options} from './config.service';\nimport {Observable} from 'rxjs/Observable';\nimport 'rxjs/add/operator/do';\nimport {JwtHttp} from './jwt-http.service';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n@Injectable()\nexport class OauthService {\n    constructor(private http: JwtHttp,\n                private injector: Injector,\n                private shared: SharedService,\n                private config: ConfigService) {}\n    authenticate(name: string, userData?: any): Observable<Response> {\n        // var injector = Injector.resolveAndCreate([Oauth1, Oauth2]);\n        const provider: { open(options?: IOauth1Options, userData?: any): Observable<Response> } = this.config.providers[name].oauthType === '1.0' ? this.injector.get(Oauth1Service) : this.injector.get(Oauth2Service);\n        return provider.open(this.config.providers[name], userData || {})\n            .do((response: Response) => {\n                // this is for a scenario when someone wishes to opt out from\n                // satellizer's magic by doing authorization code exchange and\n                // saving a token manually.\n                if (this.config.providers[name].url) {\n                    this.shared.setToken(response);\n                }\n            });\n    }\n    unlink(provider: string, opts: RequestOptionsArgs) {\n        opts = opts || {};\n        let url = opts.url ? opts.url : joinUrl(this.config.baseUrl, this.config.unlinkUrl);\n        opts.body = JSON.stringify({ provider: provider }) || opts.body;\n        opts.method = opts.method || 'POST';\n        \n        return this.http.request(url, opts);\n    }\n}\n","import {Injectable} from '@angular/core';\nimport {Response, RequestOptionsArgs} from '@angular/http';\nimport {SharedService} from './shared.service';\nimport {LocalService} from './local.service';\nimport {OauthService} from './oauth.service';\nimport {Observable} from 'rxjs/Observable';\n\n/**\n * Created by Ron on 17/12/2015.\n */\n\n@Injectable()\nexport class AuthService {\n    constructor(private shared: SharedService,\n                private local: LocalService,\n                private oauth: OauthService) {\n    }\n\n    login(user, opts?: RequestOptionsArgs): Observable<Response> {\n        return this.local.login(user, opts);\n    }\n\n    signup(user, opts?: RequestOptionsArgs): Observable<Response> {\n        return this.local.signup(user, opts);\n    }\n\n    logout(): Observable<void> {\n        return this.shared.logout();\n    }\n\n    authenticate(name: string, userData?: any): Observable<Response> {\n        return this.oauth.authenticate(name, userData);\n    }\n\n    link(name: string, userData?: any): Observable<Response> {\n        return this.oauth.authenticate(name, userData);\n    }\n\n    unlink(provider: string, opts: RequestOptionsArgs): Observable<Response> {\n        return this.oauth.unlink(provider, opts);\n    }\n\n    isAuthenticated(): boolean {\n        return this.shared.isAuthenticated();\n    }\n\n    getToken(): string {\n        return this.shared.getToken();\n    }\n\n    setToken(token: string | Response): void {\n        this.shared.setToken(token);\n    }\n\n    removeToken(): void {\n        this.shared.removeToken();\n    }\n\n    getPayload(): any {\n        return this.shared.getPayload();\n    }\n\n    setStorageType(type: string): void {\n        this.shared.setStorageType(type);\n    }\n\n    getExpirationDate(): Date {\n        return this.shared.getExpirationDate();\n    }\n}\n","/**\n * Created by Ron on 25/12/2015.\n */\n\nimport {CustomConfig, ConfigService} from './config.service';\nimport {SharedService} from './shared.service';\nimport {JwtHttp} from './jwt-http.service';\nimport {OauthService} from './oauth.service';\nimport {PopupService} from './popup.service';\nimport {Oauth1Service} from './oauth1.service';\nimport {Oauth2Service} from './oauth2.service';\nimport {LocalService} from './local.service';\nimport {AuthService} from './auth.service';\nimport {StorageService} from './storage.service';\nimport {ModuleWithProviders, NgModule, Injector} from '@angular/core';\nimport {HttpModule, RequestOptions, XHRBackend} from '@angular/http';\nimport {Type} from '@angular/core/src/type';\nexport {LocalService} from './local.service';\nexport {Oauth2Service} from './oauth2.service';\nexport {Oauth1Service} from './oauth1.service';\nexport {PopupService} from './popup.service';\nexport {OauthService} from './oauth.service';\nexport {JwtHttp} from './jwt-http.service';\nexport {SharedService} from './shared.service';\nexport {StorageService} from './storage.service';\nexport {AuthService} from './auth.service';\nexport {ConfigService, CustomConfig} from './config.service';\n\n@NgModule({\n    imports: [HttpModule]\n})\nexport class Ng2UiAuthModule {\n    static getWithConfig(config: Type<CustomConfig>): ModuleWithProviders {\n        return {\n            ngModule: Ng2UiAuthModule,\n            providers: [\n                {provide: CustomConfig, useClass: config },\n                {provide: ConfigService, useClass: ConfigService, deps: [CustomConfig] },\n                {provide: StorageService, useClass: StorageService, deps: [ConfigService]},\n                {provide: SharedService,  useClass: SharedService, deps: [StorageService, ConfigService]},\n                {provide: JwtHttp, useClass: JwtHttp, deps: [XHRBackend, RequestOptions, SharedService, ConfigService]},\n                {provide: OauthService,  useClass: OauthService, deps: [JwtHttp, Injector, SharedService, ConfigService]} ,\n                {provide: PopupService,  useClass: PopupService, deps: [ConfigService]},\n                {provide: Oauth1Service,  useClass: Oauth1Service, deps: [JwtHttp, PopupService, ConfigService]} ,\n                {provide: Oauth2Service,  useClass: Oauth2Service, deps: [JwtHttp, PopupService, StorageService, ConfigService]} ,\n                {provide: LocalService,  useClass: LocalService, deps: [JwtHttp, SharedService, ConfigService]} ,\n                {provide: AuthService,  useClass: AuthService, deps: [SharedService, LocalService, OauthService]} ,]\n        }\n    }\n}"],"names":["target","_i","src","TypeError","Object","index","arguments","length","source","key","prototype","hasOwnProperty","call","baseUrl","url","test","joined","join","normalize","str","replace","obj1","obj2","result","i","merge","name","_","separator","letter","offset","toUpperCase","user","userOpts","opts","body","JSON","stringify","method","config","this","window","response","accessToken","json","access_token","token","data","console","warn","tokenRootData","_this","tokenRoot","split","reduce","o","x","tokenName","tokenPath","facebook","authorizationEndpoint","redirectUri","location","origin","requiredUrlParams","scope","scopeDelimiter","display","oauthType","popupOptions","width","height","google","optionalUrlParams","scopePrefix","state","encodeURIComponent","Math","random","toString","substr","github","instagram","linkedin","twitter","twitch","live","yahoo","bitbucket","spotify","keys","forEach","provider","providers","prop","ConfigService","Injectable","isStorageAvailable","supported","storageType","substring","setItem","removeItem","e","StorageService","getItem","store","value","storage","tokenPrefix","tokenSeparator","SharedService","get","getToken","base64Url","base64","parse","decodeURIComponent","atob","resolveToken","set","remove","exp","isExpired","round","Date","getTime","payload","getPayload","date","setUTCSeconds","Observable","create","observer","next","complete","type","_backend","_defaultOptions","_shared","_config","_super","__extends","JwtHttp","options","getExpirationDate","autoRefreshToken","refreshToken","switchMap","actualRequest","RequestMethod","Get","request","Post","Put","Delete","Patch","Head","authHeader","Headers","append","authToken","refreshUrl","headers","do","res","setToken","Request","setHeaders","obj","defaultHeaders","defaultHeader","has","isAuthenticated","Http","PopupService","assign","left","screenX","outerWidth","top","screenY","outerHeight","map","joinedKeyValue","keyValue","stringifiedOptions","stringifyOptions","prepareOptions","UA","navigator","userAgent","windowName","cordova","indexOf","popupWindow","open","focus","fromEvent","event","closed","of","empty","parser","document","createElement","href","search","hash","queryParams","hashParams","parseQueryString","qs","allParams","close","error","take","takeWhile","interval","documentOrigin","host","popupWindowOrigin","http","popup","Oauth1Service","userData","defaults","base","serverUrl","joinUrl","post","buildQueryString","eventListener","pollPopup","exchangeForToken","bind","oauthData","exchangeForTokenUrl","withCredentials","Oauth2Service","openPopup","stateName","responseType","keyValuePairs","urlParams","params","paramName","camelizedName","camelCase","paramValue","Array","isArray","push","pair","defaultUrlParams","responseParams","code","clientId","injector","shared","OauthService","unlinkUrl","LocalService","fullOpts","getFullOpts","loginUrl","signupUrl","local","oauth","AuthService","login","signup","logout","authenticate","unlink","removeToken","setStorageType","Ng2UiAuthModule","ngModule","provide","CustomConfig","useClass","deps","XHRBackend","RequestOptions","Injector","NgModule","imports","HttpModule"],"mappings":"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"}